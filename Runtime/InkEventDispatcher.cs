using System.Collections.Generic;
using System.IO;
using System.Linq;
using Ink.Runtime;
using UnityEngine;
using UnityEngine.Events;
using Ballpoint.Reaction;

namespace Ballpoint {

	[DisallowMultipleComponent]
	[HelpURL(HelpURL + "#ink-manager")]
	[AddComponentMenu("Ballpoint/Ink Event Dispatcher")]
	public class InkEventDispatcher : MonoBehaviour {

    public InkManager inkManager;
		public const string HelpURL = "https://github.com/lunarcloud/ballpoint-unity/tree/master/Documentation~/Ballpoint.md";
  
		[Header("Standard Events")]

		[SerializeField]
		public UnityEvent StoryReady = new UnityEvent();

		[SerializeField]
		public UnityEvent<StoryUpdate> StoryUpdate = new UnityEvent<StoryUpdate>();

		[SerializeField]
		public UnityEvent StoryEnded = new UnityEvent();

		[Header("Tags")]

		[SerializeField]
		public List<TagEventWatcher> tagEvents = new List<TagEventWatcher>();

		[Header("Observable Variables")]

		[SerializeField]
		public List<InkVariableWatcher> variableChangedEvents = new List<InkVariableWatcher>();

		[Header("External Handlers (Autogenerated - Shown for Debugging)")]

		[SerializeField]
		public List<InkTagObserver> externalTagObservers = new List<InkTagObserver>();

		[SerializeField]
		public List<InkVariableObserver> externalVariableObservers = new List<InkVariableObserver>();

		public static InkEventDispatcher FindAny()
		{
				var maybeDispatcher = FindObjectsOfType<InkEventDispatcher>();
				if (maybeDispatcher.Length > 1) {
					Debug.LogWarning("Multiple Ink Event Dispatcher found in scene, using first found");
				} else if (maybeDispatcher.Length < 1) {
					Debug.LogError("Ink Event Dispatcher could not be found in the scene!");
					return null;
				}
				
				return maybeDispatcher[0];
		}

    private void OnValidate() {
			inkManager = inkManager ?? InkManager.FindAny();
			AutodetectVariableObservers();
			AutodetectTagObservers();
		}

		private void Start() {
			AutodetectTagObservers();
		}

		internal void InitializeVariableObservation() {
			// Centrally Defined
			variableChangedEvents?.ForEach(watcher => {
				inkManager.story.ObserveVariable(watcher.name, (k, v) => watcher.Invoke(v));
			});

			// Externally Defined
			AutodetectVariableObservers();
			externalVariableObservers?.ForEach(observer => {
				inkManager.story.ObserveVariable(observer.watcher.name, (k, v) => observer.watcher.Invoke(v));
			});
		}

		internal void InvokeInitialVariableObservationValues() {
			// Send to Centrally Defined
			variableChangedEvents?.ForEach(watcher => {
				watcher.Invoke(inkManager.story.variablesState[watcher.name]);
			});
			
			// Send to Externally Defined
			externalVariableObservers?.ForEach(observer => {
				observer.watcher.Invoke(inkManager.story.variablesState[observer.watcher.name]);
			});
		}
    
		// Tag Event functions
		internal TagEventWatcher GetOrAddTagChangeWatcher(InkTagState state, string pattern) {
			tagEvents = tagEvents ?? new List<TagEventWatcher>();
			var watcher = tagEvents.Find(o => o.pattern == pattern && o.pattern == pattern);
			if (watcher == null) {
				watcher = new TagEventWatcher(state, pattern);
				tagEvents.Add(watcher);
			}
			return watcher;
		}

		public void AddTagListener(InkTagState state, string pattern, UnityAction<string> call) => GetOrAddTagChangeWatcher(state, pattern).tagEvent.AddListener(call);

		public void RemoveTagListener(InkTagState state, string pattern, UnityAction<string> call) => GetOrAddTagChangeWatcher(state, pattern).tagEvent.RemoveListener(call);

		internal void ProcessTags(List<string> tags) {
			if (tags == null || tags.Count == 0) return;

			// Send to Centrally Defined
			tagEvents.ForEach(e => tags.ForEach(tag => e.InvokeIfMatch(tag)));
			
			// Send to Externally Defined
			externalTagObservers.ForEach(observer => tags.ForEach(tag => observer.watcher.InvokeIfMatch(tag)));
		}

		// Variable Event functions
		public InkVariableWatcher GetOrAddInkVariableWatcher(string name, HandleTypeEnum types) {
			variableChangedEvents = variableChangedEvents ?? new List<InkVariableWatcher>();
			var watcher = variableChangedEvents.Find(o => o.name == name);
			if (watcher == null) {
				watcher = new InkVariableWatcher(name, types);
				variableChangedEvents.Add(watcher);
				if (inkManager.story) {
					// Setup actual watcher with ink
					inkManager.story.ObserveVariable(name, (k, v) => watcher.Invoke(v));
					watcher.Invoke(inkManager.story.variablesState[name]);
				}
			} else {
				watcher.handleAsType |= types; // ensure it's acquired with the ability to use the types desired
			}
			return watcher;
		}

		[ContextMenu("Autodetect Tag Observers")]
		private void AutodetectTagObservers() {
			externalTagObservers = (FindObjectsOfType(typeof(InkTagObserver)) as InkTagObserver[])?.ToList<InkTagObserver>();
		}

		[ContextMenu("Autodetect Variable Observers")]
		private void AutodetectVariableObservers() {
			externalVariableObservers = (FindObjectsOfType(typeof(InkVariableObserver)) as InkVariableObserver[])?.ToList<InkVariableObserver>();
		}

	}
}